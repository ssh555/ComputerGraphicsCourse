#shader vertex// 通用顶点着色器#version 330 corelayout(location = 0) in vec4 position;   // 顶点位置layout(location = 1) in vec3 normal;     // 顶点法线layout(location = 2) in vec2 texCoord;   // 纹理坐标out vec3 FragPos;      // 片段位置out vec3 Normal;       // 片段法线out vec2 TexCoord;     // 片段纹理坐标uniform mat4 model;       // 模型矩阵uniform mat4 PV;        // 投影矩阵 视图矩阵void main() {    // 计算变换后的顶点位置    vec4 worldPos = model * position;    FragPos = vec3(worldPos);    gl_Position = PV * worldPos;    // 计算变换后的法线    Normal = normalize(mat3(transpose(inverse(model))) * normal);    TexCoord = texCoord;}#shader fragment#version 330 coreout vec4 FragColor; // 输出颜色in vec3 FragPos;    // 片段位置in vec3 Normal;     // 片段法线in vec2 TexCoord;   // 片段纹理坐标uniform vec3 lightDir;    // 光源方向uniform vec3 viewPos;     // 视点位置uniform vec3 lightColor;  // 光源颜色uniform vec3 objectColor; // 物体颜色uniform float ambientStrength; // 环境光强度uniform float specularStrength; // 镜面反射强度uniform float shininess;    // 光泽度uniform sampler2D textureDiffuse;  // 漫反射纹理void main() {    // 计算视线方向    vec3 viewDir = normalize(viewPos - FragPos);    // 计算漫反射    float diff = max(dot(Normal, -lightDir), 0.0);    vec3 diffuse = diff * lightColor;    // 计算镜面反射    vec3 halfwayDir = normalize(-lightDir + viewDir);    float spec = pow(max(dot(Normal, halfwayDir), 0.0), shininess);    vec3 specular = specularStrength * spec * lightColor;    // 计算环境光    vec3 ambient = ambientStrength * lightColor;    // 应用纹理    vec4 texColor = texture(textureDiffuse, TexCoord);    // 最终颜色    vec3 result = (ambient + diffuse + specular) * objectColor;    FragColor = vec4(result, 1.0) * texColor;}
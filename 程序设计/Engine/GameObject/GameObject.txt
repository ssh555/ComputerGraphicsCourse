class GameObject : Object
{
public:
    // 变换组件 -> 不可移除，每个GameObject都有，所有Component都会引用所在GameObject.transform，不进ComponentList，但是可以GetComponent -> 栈
    const Transform transform;

private:
    // 挂载的组件 -> 栈
    vector<Component> m_components;

    // 父物体
    GameObject& m_parant;

    // 直接子物体
    vector<GameObject*> m_children;

public:
    // 获取组件
    template <typename T>
    typename std::enable_if<std::is_base_of<Component, T>::value>::type
    T* GetComponent() final;

    // 获取组件
    template <typename T>
    typename std::enable_if<std::is_base_of<Component, T>::value>::type
    vector<T*> GetComponents() final;

    // 获取子物体中的组件, 先从当前物体开始找
    template <typename T>
    typename std::enable_if<std::is_base_of<Component, T>::value>::type
    T* GetComponentInChildren() final;

    // 获取子物体中的组件, 先从当前物体开始找
    template <typename T>
    typename std::enable_if<std::is_base_of<Component, T>::value>::type
    vector<T*> GetComponentsInChildren() final;

    // 获取父物体中的组件, 先从当前物体开始找
    template <typename T>
    typename std::enable_if<std::is_base_of<Component, T>::value>::type
    T& GetComponentInParent() final;

    // 获取父物体中的组件, 先从当前物体开始找
    template <typename T>
    typename std::enable_if<std::is_base_of<Component, T>::value>::type
    vector<T*> GetComponentsInParent() final;

    // 加入组件
    template <typename T>
    typename std::enable_if<std::is_base_of<Component, T>::value>::type
    T* AddComponent() final;

    // 销毁直接Object.Destory(GetComponent<T>())

    // 设置父物体
    // 默认保留世界变换
    void SetParent(GameObject& obj, bool stayWorldTransform = true) final;

    // 获得父物体
    GameObject& GetParent() const final;

    const vector<GameObject*> GetChildren();

public:
    GameObject() : transform(*this) { }

private:
    virtual ~GameObject()
    {

    }

}
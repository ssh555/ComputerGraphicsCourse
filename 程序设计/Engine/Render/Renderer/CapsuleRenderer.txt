// 胶囊体模型渲染

#include "MeshRenderer.h"

class CapsuleRenderer : public MeshRenderer
{
public:
    CapsuleRenderer(GameObject& obj, float radius = 1.0f, float height = 2.0f, unsigned int rings = 20, unsigned int sectors = 20) 
        : MeshRenderer(obj)
    {
        SetCapsuleMesh(radius, height, rings, sectors);
        m_mat = new Material();

        m_mat->SetUniform1f("ambientStrength", 0.6f);
        m_mat->SetUniform1f("specularStrength", 0.5f);
        m_mat->SetUniform1f("shininess", 1);
    }

    void Engine::CapsuleRenderer::SetCapsuleMesh(float radius, float height, unsigned int rings, unsigned int sectors)
    {
        std::vector<float> positions;
        std::vector<unsigned int> indices;

        // Generate the top hemisphere
        for (unsigned int r = 0; r < rings / 2; ++r) {
            for (unsigned int s = 0; s < sectors; ++s) {
                float const y = sin(-CMath::PI * 0.5f + CMath::PI * r * (1.0f / (rings / 2 - 1)));
                float const x = cos(2 * CMath::PI * s * (1.0f / (sectors - 1))) * sin(CMath::PI * r * (1.0f / (rings / 2 - 1)));
                float const z = sin(2 * CMath::PI * s * (1.0f / (sectors - 1))) * sin(CMath::PI * r * (1.0f / (rings / 2 - 1)));

                positions.push_back(x * radius);
                positions.push_back(y * radius + height / 2); // Translate upwards
                positions.push_back(z * radius);

                positions.push_back(x);
                positions.push_back(y);
                positions.push_back(z);

                positions.push_back(s * (1.0f / (sectors - 1)));
                positions.push_back(r * (1.0f / (rings / 2 - 1)));
            }
        }

        // Generate the bottom hemisphere
        for (unsigned int r = rings / 2; r < rings; ++r) {
            for (unsigned int s = 0; s < sectors; ++s) {
                float const y = sin(-CMath::PI * 0.5f + CMath::PI * r * (1.0f / (rings / 2 - 1)));
                float const x = cos(2 * CMath::PI * s * (1.0f / (sectors - 1))) * sin(CMath::PI * r * (1.0f / (rings / 2 - 1)));
                float const z = sin(2 * CMath::PI * s * (1.0f / (sectors - 1))) * sin(CMath::PI * r * (1.0f / (rings / 2 - 1)));

                positions.push_back(x * radius);
                positions.push_back(y * radius - height / 2); // Translate downwards
                positions.push_back(z * radius);

                positions.push_back(x);
                positions.push_back(y);
                positions.push_back(z);

                positions.push_back(s * (1.0f / (sectors - 1)));
                positions.push_back(r * (1.0f / (rings / 2 - 1)));
            }
        }

        // Generate the cylinder part
        for (unsigned int i = 0; i < rings / 2; ++i) {
            float const y = sin(-CMath::PI * 0.5f + CMath::PI * i * (1.0f / (rings / 2 - 1)));
            float const yPos = y * radius + height / 2;
            float const yNeg = y * radius - height / 2;

            for (unsigned int s = 0; s < sectors; ++s) {
                float const x = cos(2 * CMath::PI * s * (1.0f / (sectors - 1)));
                float const z = sin(2 * CMath::PI * s * (1.0f / (sectors - 1)));

                positions.push_back(x * radius);
                positions.push_back(yPos);
                positions.push_back(z * radius);

                positions.push_back(0); // Cylinder normals are uniform along the y-axis
                positions.push_back(y > 0 ? 1 : -1); // Cylinder normals point outwards
                positions.push_back(0);

                positions.push_back(s * (1.0f / (sectors - 1)));
                positions.push_back(i * (1.0f / (rings / 2 - 1)));
            }
        }

        // Generate indices for the capsule
        for (unsigned int r = 0; r < rings - 1; ++r) {
            for (unsigned int s = 0; s < sectors - 1; ++s) {
                indices.push_back(r * sectors + s);
                indices.push_back((r + 1) * sectors + s);
                indices.push_back((r + 1) * sectors + (s + 1));

                indices.push_back(r * sectors + s);
                indices.push_back((r + 1) * sectors + (s + 1));
                indices.push_back(r * sectors + (s + 1));
            }
        }

        // Create and set the mesh
        Mesh* mesh = new Mesh(positions.data(), static_cast<unsigned int>(positions.size()),
                            indices.data(), static_cast<unsigned int>(indices.size()));
        SetMesh(mesh);
    }

};

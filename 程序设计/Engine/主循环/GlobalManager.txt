class GlobalManager {
public:
    static GlobalManager& GetInstance() {
        static GlobalManager instance; // 在首次调用时创建唯一的实例
        return instance;
    }

public:
    const ComponentManager ComponentManager;

    const CameraManager CameraManager;

    const InputManager InputManager;

    void Run()
    {
        // 更新输入

        // 更新物理

        // 更新Tick
        ComponentManager.TickAll(Time.deltatime);

        // 更新Render <- 更新MVP

        
    }

private:
    // 私有构造函数，防止外部实例化
    GlobalManager()
    {
        glfwSetFramebufferSizeCallback(window, windowResizeCallback);

    }

    void windowResizeCallback(GLFWwindow* window, int width, int height) {
        // 设置OpenGL视口的尺寸以匹配新的窗口尺寸
        glViewport(0, 0, width, height);
        CameraManager.UpdateAspectRatio(width, height);
        CameraManager.ViewportWidth = width;
        CameraManager.ViewportHeight = height;
    }

    // 禁止拷贝构造和赋值操作符，确保只有一个实例
    GlobalManager(const GlobalManager&) = delete;
    GlobalManager& operator=(const GlobalManager&) = delete;
};